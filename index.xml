<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sadlil&#39;s on Sadlil&#39;s</title>
    <link>https://sadlil.com/</link>
    <description>Recent content in Sadlil&#39;s on Sadlil&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Kazi Sadlil Rhythom</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AutoBill</title>
      <link>https://sadlil.com/project/autobill/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/project/autobill/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12 col-md-7&#34;&gt;
&lt;b&gt;Built At: &lt;a href=http://www.bitmascot.com/&gt;Bit Mascot Pvt. LTD&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
    &lt;div class=&#34;skills-tech-project&#34;&gt;
      &lt;b&gt;Built With: &lt;/b&gt;
      &lt;span&gt;Groovy&lt;/span&gt;
      &lt;span&gt;Grails&lt;/span&gt;
      &lt;span&gt;MySQL&lt;/span&gt;
      &lt;span&gt;Javascript&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;col-xs-12 col-md-5&#34;&gt;
    &lt;a href=&#34;http://www.autobill.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-external-link-square big-icon&#34;&gt;&lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
An automated billing software to manage clients Billing. Manages automated
invoice and Recurring Billing. AutoBill delivers extended functionality enabling
any business, organisation or association to engage in online customer
interaction much more efficiently. With a rich feature set including self-service
customer portal, electronic invoicing and one-click pay now features, AutoBill
makes it quick and easy for customers to pay – ensuring regular cash flow that is the
lifeblood of any business.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In addition, with the demand for complex recurring billing and automatic payment
processes greater than ever before, AutoBill delivers powerful features to do
all the heavy lifting for you. With AutoBill, spend more time selling and less
time processing invoices and payments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles and Responsibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Design and Implement various Client required Features&lt;/li&gt;
&lt;li&gt;Fix BUGS&lt;/li&gt;
&lt;li&gt;Work and update jquery based custom UI frameworks&lt;/li&gt;
&lt;li&gt;Implement Business logic for various operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>WebCommander</title>
      <link>https://sadlil.com/project/webcommander/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/project/webcommander/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12 col-md-7&#34;&gt;
&lt;b&gt;Built At: &lt;a href=http://www.bitmascot.com/&gt;Bit Mascot Pvt. LTD&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
    &lt;div class=&#34;skills-tech-project&#34;&gt;
      &lt;b&gt;Built With: &lt;/b&gt;
      &lt;span&gt;Groovy&lt;/span&gt;
      &lt;span&gt;Grails&lt;/span&gt;
      &lt;span&gt;MySQL&lt;/span&gt;
      &lt;span&gt;Javascript&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;col-xs-12 col-md-5&#34;&gt;
    &lt;a href=&#34;http://www.webcommander.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-external-link-square big-icon&#34;&gt;&lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
WebCommander has everything you need to deploy and run a successful online store. Much more than an eCommerce CMS, WebCommander includes Drag &amp;amp; Drop store design, beautiful templates, powerful eCommerce tools, built in SEO, a blog, comprehensive statistical &amp;amp; administration tools, mCommerce, social networking integration, discounts, coupons, wishlists and much more. WebCommander gives you the power and freedom needed to create and manage an online store successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles and Responsibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Design and Implement various Client required Features&lt;/li&gt;
&lt;li&gt;Fix BUGS&lt;/li&gt;
&lt;li&gt;Work and update jquery based custom UI frameworks&lt;/li&gt;
&lt;li&gt;Implement Business logic for various operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://sadlil.com/blog/hello-world/</link>
      <pubDate>Thu, 02 Feb 2017 11:27:00 +0000</pubDate>
      
      <guid>https://sadlil.com/blog/hello-world/</guid>
      <description>&lt;p&gt;Hello from Sadlil.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In few word I am -
Full time Software Engineer, Hobbyist Photographer. Loves to solves problems. Egar to learn new Technologies and plays with them. Loves to read and travel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Knows How to write code in - Go, C, C++, Java, PHP, JavaScript.
For Frameworks knows - Laravel 5, Spring 3, Grails. Worked with Hibernets.
Knows MySQL, Postgres for SQL Database But deeply in love with Elasticsearch.
Deploys things in - Kubernetes - containerized with Docker.
Familiuer with AWS, Google Cloud, gRPC, Jenkins, GlusterFS, HAProxy etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sadlil&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bd.linkedin.com/in/sadli&#34; target=&#34;_blank&#34;&gt;LinedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/cv/sadlil&#34; target=&#34;_blank&#34;&gt;Stackoverflow Career Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/iamsadlil&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Personality:&lt;/strong&gt; ENTJ-A (The Commander)&lt;/p&gt;

&lt;p&gt;Life Philosophy: &amp;ldquo;I don&amp;rsquo;t Believe in Magic.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This site is built with HUGO and Proudly Hosted in Github Pages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>False Alarm Detection in Wireless Body Sensor Network using Adaptive and Intelligent Approach</title>
      <link>https://sadlil.com/publication/false-alarm/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/publication/false-alarm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>প্রাইম - বিট সিভ</title>
      <link>https://sadlil.com/blog/prime-bit-seive-bangla/</link>
      <pubDate>Mon, 03 Feb 2014 11:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/blog/prime-bit-seive-bangla/</guid>
      <description>&lt;p&gt;এক ছোট ভাই পোষ্ট দিল যে ১০০০০০০০০০ এর বড় প্রাইম নাম্বার গুলা কিভাবে বের করা যায়। তার জবাবে এই টিউটোরিয়াল টা লেখা । বড়দের জন্য নয়।&lt;/p&gt;

&lt;p&gt;১০০০০০০০০০ প্ররযন্ত প্রাইম নাম্বার আমরা সিভ নামক একটা Algorithm ব্যবহার করে খুব সহজে বের করে ফেলতে পারি। তাই না। sieve মানে ছাকনি। আর Seive of Eratosthenes হল এমন একটা ছাকনি যা কতগুলা নাম্বার থেকে প্রাইম নাম্বার গুলা ছেকে বের করে ফেলে। তার পর-ও যারা সিভ জানে না তারা একটু কষ্ট করে সিভটা শিখে ফেলো।কারন আমরা এখন সিভের
খালাত ভাই- মামত ভাই Algorithm শিখব।&lt;/p&gt;

&lt;p&gt;Links for Seive algorithm :&lt;br&gt;
    1.  &lt;a href=&#34;http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;&lt;br&gt;
    2.  &lt;a href=&#34;http://www.programminglogic.com/the-sieve-of-eratosthenes-implemented-in-c/&#34; target=&#34;_blank&#34;&gt;Programming Logic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;সিভের জন্য আমার অনেক ফেভারিট ছবিঃ
&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&#34; alt=&#34;Seive&#34; data-featherlight=&#34;http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&#34; style=&#34;cursor:zoom-in;&#34;&gt;&lt;/p&gt;

&lt;p&gt;মামাত ভাই Algorithm শিখার আগে সিভ এর কিছু জিনিস দেখা দরকার। সিভ একটা পতাকা (Flag) Array ব্যবহার করে, যাতে যদি 1 থাকে (কোড ভেদে ০ থাকতে পারে। তবে এখানে আমরা ধরে নিচ্ছি যে ১ থাকলে প্রাইম, ০ থাকলে প্রাইম না) তাহলে সংখ্যাটা প্রাইম। একটু সহজ করে বলছি, Array যদি S হয় তাহলে S[1]==0 মানে হল ১ প্রাইম না। আবার S[2]==1 মানে ২ প্রাইম। তারমানে Array S এর ইনডেক্স থেকে আমরা কোন সংখ্যা প্রাইম নাকি প্রাইম না তা বের করতে পারি। এখন সমস্যা টা হল সিভ ব্যবহার করতে চাইলে আমাদের অবশ্যই একটা Array দরকার। কিন্তু C তে ১০০০০০০০০০ এর বড় সাইজের Array কই পাব। তাহলে এখন আমরা করব কি?? প্রাইম কি তাহলে বের করতে পারব না। কেন পারব না, আমরা অনেক স্মার্ট- আমরা সব পারি।&lt;/p&gt;

&lt;p&gt;তো স্মার্ট মানুষেরা প্রাইম বের করার জন্য কিছু পদ্ধতি আবিষ্কার করল&amp;ndash;&lt;br&gt;
        ১। বিট সিভ &amp;ndash; সিভের মামাত ভাই,&lt;br&gt;
        ২। সেগমেন্ট সিভ &amp;ndash;সিভের সুন্দরি খালাত বোন।&lt;br&gt;&lt;/p&gt;

&lt;p&gt;বিট সিভঃ
সিভ করতে গিয়া অলরেডি আমরা একটা আনস্মার্ট কাজ করে ফেলছি। কি কাজ। কাজটা হল &amp;ndash; সিভের জন্য আমরা যে Array টা নিছি তা। আসলে Array টা না। Array-র টাইপ টা। আমরা সবাই অলমোস্ট S Array টা নিছি ইন্টেজার,তাই না? এখন ইন্টেজার নেয়ায় কি প্রবলেম হইছে আস দেখি &amp;ndash;
একটা ইন্টেজার নাম্বার 16(আসলেই কি তাই) টা বিট দ্বারা তৈরী। তো ইন্টেজার ম্যমরি তে ১ এবং ০ কিভাবে রাখে&lt;br&gt;
1 == 0000000000000001&lt;br&gt;
0 == 0000000000000000&lt;br&gt;&lt;/p&gt;

&lt;p&gt;তাহলে স্মার্ট মানুষেরা এতক্ষনে বুঝে ফেলছে আমি কি বলতে চাই। আমরা একটা ইন্টেজার ফ্লাগ হিসেবে ব্যবহার করলে ওই ইন্টেজারের ১৫ টা বিট নষ্ট করতেছি তাই না। কারন আমরা ব্যবহার করতেছি একদম লাস্ট বিটটা। এখন আমরা যদি বাকি ১৫ টা বিট ব্যবহার করতে পারতাম তাহলে আমাদের প্রাইমের রেঞ্জ হইত ১৬*১০০০০০০০০০০ == ১৬০০০০০০০০০০। অনেক বড় তাই না। Long ব্যবহার করে আমরা অলমোস্ট ৩২০০০০০০০০০০ পর্যন্ত প্রাইম ব্যবহার করতে পারি।&lt;/p&gt;

&lt;p&gt;এখন বিট সিভ-এ আমরা করবটা কি? একদম সোজা সিভ-ই চালাব কিন্তু একটু বুদ্ধিমান ভাবে। আগে S Array-এর ইনডেক্স আমরা ব্যবহার করতাম এইবার করব অন্য রকম। কি রকম - S Array-এর ০ ইনডেক্স এর ১ম বিট Represent করবে ১ কে, ০ ইনডেক্স এর ২য় বিট Represent করবে দুই কে। এইভাবে ৯৯৯৯৯৯৯৯৯ ইনডেক্স এর ১৬ম বিট Represent করবে ১৬০০০০০০০০০০ কে। সহজ না।&lt;/p&gt;

&lt;p&gt;এখন এই কাজটা কেমনে করব। (অনেক কিছু-ই আছে আমি বুঝি কিন্তু এখন-ও জানি না যে ঐ কাজ টা কেমনে করব।) তাই প্রথমে-ই কিছু বিট-অপারেশন শিখা জরুরি। বিট And, Or এবং Shift. এই তিনটা পারলে-ই আমাদের হবে।&lt;/p&gt;

&lt;p&gt;কেউ যদি না পার তাহলে এই লিঙ্কটা দেখতে পার আশা করি ভাল ভাবে বুঝে যাবেঃ &lt;a href=&#34;http://binaryrongo.wordpress.com/2013/07/27/bitwise-operator/&#34; target=&#34;_blank&#34;&gt;http://binaryrongo.wordpress.com/2013/07/27/bitwise-operator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;এখন আমাদের কে বিট সিভ করতে হবে। সিভের কন্সেপ্ট মনে আছে?? কি করতাম আমরা &amp;ndash; ২ থেকে ঘুরা শুরু করতাম দেখতাম ঐটা প্রাইম নাকি মানে চেক করতাম যে S এর ঐ পজিশনে ১ আছে নাকি। থাকলে ঐ সংখার সকল মাল্টিপ্লায়ার গুলার ইনডেক্স ০ করে দিতাম। আর প্রাইম না হলে মানে ইনডেক্স ০ হলে পরের নাম্বারে চলে যেতাম। এখানে-ও তাই করব জাস্ট S এর ইনডেক্স এর বদলে এইবার S এর ইনডেক্স এর বিট ব্যবহার করব।&lt;/p&gt;

&lt;p&gt;এই কাজের জন্য আমরা দুইটা ফাংশন লিখব। int check(long n, long pos) যা আমাদের n ইন্টেজারের pos তম বিটটা চেক করে দিবে যে এইটা ১ নাকি ০। এবং long set(long n, long pos) n এর pos তম বিটটা ১ করে দিবে। বাকিটা ত সিভের মতই।&lt;/p&gt;

&lt;p&gt;এতক্ষন যা বললাম তার একটা ইমপ্লিমেন্টেশনঃ&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;setBit&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; position )
{
    n &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#333&#34;&gt;|&lt;/span&gt; ( &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; position );
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; n;
}


&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;checkBit&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; position )
{
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#333&#34;&gt;&amp;amp;&lt;/span&gt; ( &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; position );
}


&lt;span style=&#34;color:#579&#34;&gt;#define MAX 10001
&lt;/span&gt;&lt;span style=&#34;color:#579&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; prime[MAX];

&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;primeGenerator&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; n )
{
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; sqrt( n );
    prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt; );
    prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt; );
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;4&lt;/span&gt;; i &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; x; i &lt;span style=&#34;color:#333&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt; )
        prime[i&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[i&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;], i&lt;span style=&#34;color:#333&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt; );
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;3&lt;/span&gt;; i &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; x; i &lt;span style=&#34;color:#333&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt; )
    {
        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#333&#34;&gt;!&lt;/span&gt;checkBit( prime[i&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;], i&lt;span style=&#34;color:#333&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt; )
        {
            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#333&#34;&gt;+&lt;/span&gt;i; j &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; n; j &lt;span style=&#34;color:#333&#34;&gt;+=&lt;/span&gt; i )
                prime[j&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[j&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;], j&lt;span style=&#34;color:#333&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt; );
        }
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;এইটা হল সিভের খালাত ভাই।&lt;/p&gt;

&lt;p&gt;এখন আমার পার্সোনাল ফেভারিট সিভের সুন্দরি খালাত বোন। সেগমেন্ট সিভ। এইটা একটা ইস্পিসাল কাইন্ড অব সিভ। যা একটা নির্দিস্ট রেঞ্জের মধ্যে কাজ করে। ধর A এবং B দুইটা ইন্টিজার ভ্যলু। সাপোজ A=100000 এবং B=255555 যাদের মধ্যে একটা নির্দিস্ট দুরত্ব থাকবে। সেগমেন্ট সিভ এই দুই দুরুত্বের মাঝে কাজ করে এদের মধ্যে যত প্রাইম নাম্বার আছে তা বের করে দিবে।এইটা নিয়া পরে আরেকদিন লেখব নে।&lt;/p&gt;

&lt;p&gt;আপাতত বিট সিভ নিয়া গেজাও। প্রবলেম সলভ কর। কোন সমস্যায় পরলে আমাদের কাছে জানাইতে ভুইল না।&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PC Oscilloscope</title>
      <link>https://sadlil.com/project/pc-oscilloscope/</link>
      <pubDate>Fri, 01 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/project/pc-oscilloscope/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12 col-md-7&#34;&gt;
&lt;b&gt;Built At: &lt;a href=http://mbstu.ac.bd/&gt;Mawlana Bhashani Science and Technology University&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
    &lt;div class=&#34;skills-tech-project&#34;&gt;
      &lt;b&gt;Built With: &lt;/b&gt;
      &lt;span&gt;JavaSE&lt;/span&gt;
      &lt;span&gt;JavaComm&lt;/span&gt;
      &lt;span&gt;C++&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
A computer based Oscilloscope simulation program. Shows the output of an oscillating AC circuit&amp;rsquo;s in computer monitor with an JavaSE based Application. An circuit capture the oscillating power and the interpret it and then send it to the JavaSE application via USB. The Java Desktop application shows the changing graph in the computer monitor.
This is an cost efficient and safe implementation of Real Oscilloscope Device. It also included various feature like saving and printing the output directly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles and Responsibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;User Interface Design,&lt;/li&gt;
&lt;li&gt;Software Design,&lt;/li&gt;
&lt;li&gt;Hardware Interfacing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
